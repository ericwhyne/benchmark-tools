- hosts: master
  remote_user: root
  tasks:
    - name: be sure libselinux-python are installed
      yum: name=libselinux-python state=present
    - name: self identify master
      lineinfile: dest=/root/master.txt line='I am the master' create=yes

- hosts: slaves
  remote_user: root
  tasks:
    - name: be sure libselinux-python are installed
      yum: name=libselinux-python state=present
    - name: self identify slaves
      lineinfile: dest=/root/slave.txt line='I am a slave' create=yes

- hosts: all
  remote_user: root
  tasks:
    #line="{{ hostvars[item].private_ip }} {{ hostvars[item].host_alias }}"
    - name: update hosts file
      lineinfile:
        dest=/etc/hosts
        line="{{ item }} {{ hostvars[item].host_alias }}"
        state=present
      with_items: groups['all']

    - name: break StrictHostKeyChecking to allow automated provisioning
      lineinfile: dest=/etc/ssh/ssh_config line="StrictHostKeyChecking no"

    # SSH pubkey stuff for root
    - name: creat ssh directories
      file: path=/root/.ssh state=directory
    - name: put master key on all servers as id_rsa
      copy: src=ansible.key.temp dest=/root/.ssh/id_rsa mode=0600
    - name: put master pub key on all servers as id_rsa.pub
      copy: src=ansible.key.temp.pub dest=/root/.ssh/id_rsa.pub mode=0600
    - name: trust the master keys
      authorized_key: user=root key="{{ lookup('file', 'ansible.key.temp.pub') }}"

    # Dependencies
    - name: install yum packages
      yum: pkg={{item}} state=latest
      with_items:
        - time
        - rsync
        - net-tools
        - java-1.8.0-openjdk-devel

    # Hadoop setup
    - name: create hadoop user
      user: name=hadoop
    - name: creat hadoop user ssh directory
      file: path=/home/hadoop/.ssh owner=hadoop state=directory
    - name: put master key on all servers as id_rsa
      copy: src=ansible.key.temp dest=/home/hadoop/.ssh/id_rsa owner=hadoop group=hadoop mode=0600
    - name: put master pub key on all servers as id_rsa.pub
      copy: src=ansible.key.temp.pub dest=/home/hadoop/.ssh/id_rsa.pub owner=hadoop group=hadoop mode=0600
    - name: trust the master keys as user hadoop
      authorized_key: user=hadoop key="{{ lookup('file', 'ansible.key.temp.pub') }}"

    - name: create data directory
      file: path=/data state=directory mode=1777 owner=hadoop group=hadoop
    - name: download hadoop
      get_url: url=http://apache.claz.org/hadoop/core/hadoop-2.7.1/hadoop-2.7.1.tar.gz dest=/root/hadoop-2.7.1.tar.gz
    - name: extract hadoop to /usr/local
      unarchive: src=/root/hadoop-2.7.1.tar.gz copy=no dest=/usr/local/
    - name: set hadoop symbolic link
      file: state=link dest=/usr/local/hadoop src=/usr/local/hadoop-2.7.1
    - name: set ownership of /usr/local/hadoop-2.7.1 to hadoop user
      file: path=/usr/local/hadoop-2.7.1 owner=hadoop group=hadoop state=directory recurse=yes
    - name: set hadoop home
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='HADOOP_HOME=/usr/local/hadoop'
    - name: set mapred home
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='HADOOP_MAPRED_HOME=$HADOOP_HOME'
    - name: set hdfs home
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='HADOOP_HDFS_HOME=$HADOOP_HOME'
    - name: set yarn home
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='YARN_HOME=$HADOOP_HOME'
    - name: set java home
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='JAVA_HOME=/usr/lib/jvm/java'
    - name: set java home in hadoop env
      lineinfile: state=present create=yes dest=/usr/local/hadoop/etc/hadoop/hadoop-env.sh line='export JAVA_HOME=/usr/lib/jvm/java'
    - name: append hadoop home to path
      lineinfile: state=present dest=/home/hadoop/.bash_profile line='PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin'
    - name: Copy hadoop files
      copy: src=templates/{{item}} dest=/usr/local/hadoop/etc/hadoop/{{item}} owner=hadoop group=hadoop mode=0644
      with_items:
        - core-site.xml
        - hdfs-site.xml
        - mapred-site.xml
        - yarn-site.xml

- hosts: master
  remote_user: root
  tasks:
    - name: write slaves file
      lineinfile:
        dest=/usr/local/hadoop/etc/hadoop/slaves
        create=yes
        regexp='{{ hostvars[item].host_alias }}'
        line="{{ hostvars[item].host_alias }}"
        state=present
      with_items: groups['all']
    - name: remove localhost from slaves file
      lineinfile: dest=/usr/local/hadoop/etc/hadoop/slaves line='localhost' state=absent
    - name: fix ownership of slaves file
      file: path=/usr/local/hadoop/etc/hadoop/slaves owner=hadoop group=hadoop mode=0644

    # Copy files to master
    - name: Copy notes to master
      copy: src=templates/{{item}} dest=/home/hadoop/ owner=hadoop group=hadoop mode=0644
      with_items:
        - hadoop-notes.txt

    - name: Copy scripts to master
      copy: src=templates/{{item}} dest=/home/hadoop/ owner=hadoop group=hadoop mode=0744
      with_items:
        - generate-terasort-data.sh
        - terasort.sh
        - teravalidate.sh
        - disk-performance.sh
        - transfer-test.sh
        - hadoop-init.sh
